<?php

namespace Modules\Exercise01\Tests\Unit\Services;

use Carbon\Carbon;
use InvalidArgumentException;
use Modules\Exercise01\Services\DTO\Price;
use Modules\Exercise01\Services\PriceService;
use Tests\TestCase;

class PriceServiceTest extends TestCase
{
    protected $service;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->service = new PriceService();
    }

    public function test_calculate_with_negative_quantity()
    {
        $this->expectException(InvalidArgumentException::class);

        $this->service->calculate(-1000, true);
        $this->assertSame(
            'Quantity must be greater than 0',
            $this->getExpectedExceptionMessage()
        );
    }

    public function test_calculate_with_quantity_is_0()
    {
        $this->expectException(InvalidArgumentException::class);

        $this->service->calculate(0, true);
        $this->assertSame(
            'Quantity must be greater than 0',
            $this->getExpectedExceptionMessage()
        );
    }

    public function test_calculate_without_voucher()
    {
        Carbon::setTestNow(
            Carbon::create(2021, 03, 16, 15, 00)
        );
        //Call function need test
        $result = $this->service->calculate(1, false);
        $this->assertInstanceOf(Price::class, $result);
        $this->assertSame(0, $result->getSpecialTimeDiscount());
        $this->assertSame(490, $result->getTotal());
        $this->assertSame(0, $result->getVoucherDiscount());
    }

    public function test_calculate_with_voucher_and_quantity_is_1()
    {
        //Mock time now
        Carbon::setTestNow(Carbon::create(2021, 03, 16, 15, 00));

        //Call function need test
        $result = $this->service->calculate(1, true);

        $this->assertInstanceOf(Price::class, $result);
        $this->assertSame(0, $result->getSpecialTimeDiscount());
        $this->assertSame(100, $result->getTotal());
        $this->assertSame(390, $result->getVoucherDiscount());
    }

    public function test_calculate_before_special_time()
    {
        //Mock time now
        Carbon::setTestNow(Carbon::create(2021, 03, 16, 15, 59));

        //Call function need test
        $result = $this->service->calculate(10, true);

        $this->assertInstanceOf(Price::class, $result);
        $this->assertSame(0, $result->getSpecialTimeDiscount());
        $this->assertSame(4510, $result->getTotal());
        $this->assertSame(390, $result->getVoucherDiscount());
    }

    public function test_calculate_with_min_special_time()
    {
        //Mock time now
        Carbon::setTestNow(Carbon::create(2021, 03, 16, 16, 00));

        //Call function need test
        $result = $this->service->calculate(10, true);

        $this->assertInstanceOf(Price::class, $result);
        $this->assertSame(1800, $result->getSpecialTimeDiscount());
        $this->assertSame(2710, $result->getTotal());
        $this->assertSame(390, $result->getVoucherDiscount());
    }

    public function test_calculate_with_max_special_time()
    {
        //Mock time now
        Carbon::setTestNow(Carbon::create(2021, 03, 16, 17, 59));

        //Call function need test
        $result = $this->service->calculate(10, true);

        $this->assertInstanceOf(Price::class, $result);
        $this->assertSame(1800, $result->getSpecialTimeDiscount());
        $this->assertSame(2710, $result->getTotal());
        $this->assertSame(390, $result->getVoucherDiscount());
    }

    public function test_calculate_with_special_time()
    {
        //Mock time now
        Carbon::setTestNow(Carbon::create(2021, 03, 16, 16, 30));

        //Call function need test
        $result = $this->service->calculate(10, true);

        $this->assertInstanceOf(Price::class, $result);
        $this->assertSame(1800, $result->getSpecialTimeDiscount());
        $this->assertSame(2710, $result->getTotal());
        $this->assertSame(390, $result->getVoucherDiscount());
    }

    public function test_calculate_after_special_time()
    {
        //Mock time now
        Carbon::setTestNow(Carbon::create(2021, 03, 16, 18, 00));

        //Call function need test
        $result = $this->service->calculate(10, true);

        $this->assertInstanceOf(Price::class, $result);
        $this->assertSame(0, $result->getSpecialTimeDiscount());
        $this->assertSame(4510, $result->getTotal());
        $this->assertSame(390, $result->getVoucherDiscount());
    }
}
